"use strict";
export * as format from "./format.js";

import randomstring from "randomstring";

/**
 * Count the number of UTF-8 characters represented into the string,
 * for example characters generated by encodeURI
 * @param {*} str
 */
export function count_utf8_characters(str: string): number {
  return str.match(/%[A-Z0-9]{2}/g).length;
}

export function has_special_characters(str: string): boolean {
  // $?!:--~_*^`"/\{}[]
  return /[\$\?\!\:--~_\*\^`"\/\\\{\}\[\]]/.test(str);
}

/**
 * Return val if it is a string or String,
 * null otherwise
 * @param val
 *
 * @return {string|String|null}
 */
export function if_is(val: any): string | String {
  if (typeof val === "string" || val instanceof String) {
    return val;
  }

  return null;
}

/**
 * Return if obj is a string/String or not
 * @param {*} val
 */
export function is(val: any): boolean {
  return typeof val === "string" || val instanceof String;
}

/**
 * Return the number of occurences
 * of the specified regex
 * in the specified string
 * @param regex
 * @param str
 */
export function nb_occurences(regex: RegExp, str: string): number {
  let look_in = "" + str;
  let idx;
  let nb = 0;
  while ((idx = str.search(regex))) {
    nb++;
    str = str.slice(idx + 1);
  }

  return nb;
}

const whitespaces_regex_start = /^\s*/;
const whitespaces_regex_end = /\s*$/;
export function remove_starting_whitespaces(str: string) {
  return str.replace(whitespaces_regex_start, "");
}

export function remove_ending_whitespaces(str: string) {
  return str.replace(whitespaces_regex_end, "");
}

/**
 * Remove starting and ending spaces in str and return the result
 * @param str
 */
export function remove_enclosing_spaces(str: string): string {
  return remove_starting_whitespaces(remove_ending_whitespaces(str));
}

export function repeat(
  nb_repeat: number,
  char: string = "\t",
  str: string = ""
): string {
  for (let i = 0; i < nb_repeat; i++) {
    str += char;
  }
  return str;
}

/**
 * Convert specified value to string
 * @param {*} obj
 *
 * @return {string | null} Return null if failed converting to string
 */
export function to(obj: any): string {
  //
  // Already string
  {
    if (is(obj)) {
      return obj;
    }
  }

  const type = typeof obj;
  //
  // Number|number
  {
    if (type === "number" || obj instanceof Number) {
      return obj + "";
    }
  }

  //
  // Object with toString method
  {
    if (type === "object" && typeof obj.toString === "function") {
      return obj.toString();
    }
  }

  //
  // Attempt with string constructor
  {
    try {
      return new String(obj) + "";
    } catch (ex) {
      const msg =
        "Could not convert variable of type " +
        type +
        (type === "object" ? "(" + obj.constructor.name + ") " : "") +
        " to string";
      global.logger.error = msg;
      return null;
    }
  }
}

export function random(length: number): string {
  return randomstring.generate({
    length: length,
  });
}
