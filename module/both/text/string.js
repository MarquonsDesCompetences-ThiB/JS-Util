"use strict";
import { number } from "../_both.js";
import randomstring from "randomstring";
/**
 * Count the number of UTF-8 characters represented into the string,
 * for example characters generated by encodeURI
 * @param {*} str
 */
export function count_utf8_characters(str) {
    return str.match(/%[A-Z0-9]{2}/g).length;
}
export function has_special_characters(str) {
    // $?!:--~_*^`"/\{}[]
    return /[\$\?\!\:--~_\*\^`"\/\\\{\}\[\]]/.test(str);
}
/**
 * Return val if it is a string or String,
 * null otherwise
 * @param val
 *
 * @return {string|String|null}
 */
export function if_is(val) {
    if (typeof val === "string" || val instanceof String) {
        return val;
    }
    return null;
}
/**
 * Return if obj is a string/String or not
 * @param {*} val
 */
export function is(val) {
    return typeof val === "string" || val instanceof String;
}
/**
 * Return the number of occurences
 * of the specified regex
 * in the specified string
 * @param regex
 * @param str
 */
export function nb_occurences(regex, str) {
    let look_in = "" + str;
    let idx;
    let nb = 0;
    while ((idx = str.search(regex))) {
        nb++;
        str = str.slice(idx + 1);
    }
    return nb;
}
/**
 * Remove starting and ending spaces in str and return the result
 * @param str
 */
export function remove_enclosing_spaces(str) {
    const formatted = str.replace(/^\s*/, ""); //start spaces
    return formatted.replace(/\s*$/, ""); //end spaces
}
/**
 * Convert specified value to string
 * @param {*} obj
 *
 * @return {string | null} Return null if failed converting to string
 */
export function to(obj) {
    //
    // Already string
    {
        if (is(obj)) {
            return obj;
        }
    }
    //
    // Number
    {
        if (number.is(obj)) {
            return obj + "";
        }
    }
    //
    // Object with toString method
    {
        if (typeof obj === "object" && typeof obj.toString === "function") {
            return obj.toString();
        }
    }
    //
    // Attempt with string constructor
    {
        try {
            return new String(obj) + "";
        }
        catch (ex) {
            const type = typeof obj;
            const msg = "Could not convert variable of type " +
                type +
                (type === "object" ? "(" + obj.constructor.name + ") " : "") +
                " to string";
            global.logger.error = msg;
            return null;
        }
    }
}
export function random(length) {
    return randomstring.generate({
        length: length,
    });
}
//# sourceMappingURL=string.js.map